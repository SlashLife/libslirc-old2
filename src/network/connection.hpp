/***************************************************************************
**  Copyright 2014-2014 by Simon "SlashLife" Stienen                      **
**  http://projects.slashlife.org/libslirc/                               **
**  libslirc@projects.slashlife.org                                       **
**                                                                        **
**  This file is part of libslIRC.                                        **
**                                                                        **
**  libslIRC is free software: you can redistribute it and/or modify      **
**  it under the terms of the GNU Lesser General Public License as        **
**  published by the Free Software Foundation, either version 3 of the    **
**  License, or (at your option) any later version.                       **
**                                                                        **
**  libslIRC is distributed in the hope that it will be useful,           **
**  but WITHOUT ANY WARRANTY; without even the implied warranty of        **
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         **
**  GNU General Public License for more details.                          **
**                                                                        **
**  You should have received a copy of the GNU General Public License     **
**  and the GNU Lesser General Public License along with libslIRC.        **
**  If not, see <http://www.gnu.org/licenses/>.                           **
***************************************************************************/

#ifndef LIBSLIRC_HDR_NETWORK_CONNECTION_HPP_INCLUDED
#define LIBSLIRC_HDR_NETWORK_CONNECTION_HPP_INCLUDED

#include <functional>
#include <memory>
#include <string>

#include <boost/noncopyable.hpp>

namespace boost { namespace asio { namespace ssl {
	struct context;
}}}
namespace boost { namespace system {
	struct error_code;
}}

namespace slirc {
namespace network {

namespace detail {
	struct connection_implementation;
}

/**
 * \brief Simple implementation for single connections.
 *
 * Use this class to set up handlers for a connection before either
 * establishing a connection to a remote server using connect() or accepting a
 * connection from a remote client using accept().
 */
struct connection: private boost::noncopyable {
	/**
	 * \brief Callback type for status handlers.
	 */
	typedef std::function<
		void(const boost::system::error_code &)
	> status_handler_type;

	/**
	 * \brief Callback type for recv handlers.
	 */
	typedef std::function<
		void(const std::string &)
	> recv_handler_type;

	/**
	 * \brief Callback type for send handlers.
	 */
	typedef std::function<
		void(std::size_t)
	> send_handler_type;

	/**
	 * \brief Constructs a connection.
	 */
	connection();

	/**
	 * \brief Destructs a connection.
	 */
	~connection();

	/**
	 * \brief Sets up a handler for connection status changes.
	 *
	 * The handler will be called whenever the status of the connection
	 * changes.
	 *
	 * It will be called with an error code evaluation to false once when the
	 * connection is established. Other than that the error codes generated by
	 * ASIO are passed on.
	 *
	 * \param status_handler The status handler callback to be set.
	 *
	 * \note The handler passed may be called from a different thread. Make
	 *       sure to properly synchronize its implementation.
	 *
	 * \note This function should only be called before calling connect()
	 *       or accept()
	 */
	void on_status(status_handler_type status_handler);

	/**
	 * \brief Sets up a handler to accept incoming data.
	 *
	 * The handler will be called whenever data is received on the socket.
	 *
	 * \param recv_handler The recv handler callback to be set.
	 *
	 * \note The handler passed may be called from a different thread. Make
	 *       sure to properly synchronize its implementation.
	 *
	 * \note This function should only be called before calling connect()
	 *       or accept()
	 */
	void on_recv(recv_handler_type recv_handler);

	/**
	 * \brief Sets up a handler to confirm send status.
	 *
	 * The handler will be called whenever data has been sent on the socket.
	 *
	 * \param send_handler The send handler callback to be set.
	 *
	 * \note The handler passed may be called from a different thread. Make
	 *       sure to properly synchronize its implementation.
	 *
	 * \note This function should only be called before calling connect()
	 *       or accept()
	 */
	void on_send(send_handler_type send_handler);

	/**
	 * \brief Registers an SSL context to be used by the connection.
	 *
	 * Calling this function will set the connection to use SSL with the
	 * supplied context.
	 *
	 * \param ssl_context The SSL context to be used for the connection.
	 *
	 * \note The caller is responsible to ensure the lifetime of the SSL
	 *       context passed for the lifetime of the connection.
	 *
	 * \note This function should only be called before calling connect()
	 *       or accept()
	 */
	void use_ssl(const boost::asio::ssl::context &ssl_context);

	/**
	 * \brief Switches the connection to non-SSL mode.
	 *
	 * \note This function should only be called before calling connect()
	 *       or accept()
	 */
	void no_ssl();

	/**
	 * \brief Sends data to the remote side.
	 *
	 * \param data The data to send.
	 *
	 * \note This function should only be called after establishing a
	 *       connection.
	 */
	void send(const std::string &data);

	/**
	 * \brief Establishes a connection to a remote server.
	 *
	 * \param hostname The IP or host name to connect to.
	 * \param port The port number to connect to.
	 */
	void connect(const std::string &hostname, unsigned port);

	/**
	 * \brief Ends the existing connection.
	 */
	void disconnect();

private:
	std::unique_ptr<detail::connection_implementation> impl;
};

}
}

#endif // LIBSLIRC_HDR_NETWORK_CONNECTION_HPP_INCLUDED
